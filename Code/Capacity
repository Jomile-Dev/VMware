# VMware Cluster Capacity Analysis Script - N-2 Version
# Calculates cluster capacity based on N-2 availability model

# Connection to multiple vCenter Servers
$vCenterServers = @(
    "vcenter1.domain.com",
    "vcenter2.domain.com", 
    "vcenter3.domain.com"
)

# Configuration - Modify these values as needed
$CpuOvercommitRatio = 3.0             # 3:1 CPU overcommit ratio

# Email Configuration
$SendEmail = $true                     # Set to $false to disable email
$EmailTo = "admin@company.com"         # Recipient email
$EmailFrom = "vmware-reports@company.com" # Sender email
$EmailSubject = "VMware Cluster Capacity Analysis (N-2) - $(Get-Date -Format 'yyyy-MM-dd')"
$SMTPServer = "mail.company.com"       # Your SMTP server
$SMTPPort = 465                        # SSL port (465 for SSL, 587 for TLS)
$UseSSL = $true                        # Use SSL encryption
$SMTPCredentials = $null               # No SMTP authentication required

# Get credentials once at the start
Write-Host "Please enter your vCenter credentials:" -ForegroundColor Yellow
$Credential = Get-Credential

# Suppress certificate warnings (optional)
Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false -Scope Session

try {
    # Connect to vCenter Servers
    Write-Host "Connecting to vCenter Servers:" -ForegroundColor Green
    
    foreach ($server in $vCenterServers) {
        if (-not [string]::IsNullOrWhiteSpace($server)) {
            $cleanServer = $server.Trim()
            if ($cleanServer -ne "") {
                Write-Host "  Attempting connection to: $cleanServer" -ForegroundColor Cyan
                try {
                    Connect-VIServer -Server $cleanServer -Credential $Credential -ErrorAction Stop
                    Write-Host "    ✓ Connected successfully" -ForegroundColor Green
                } catch {
                    Write-Host "    ✗ Failed to connect: $($_.Exception.Message)" -ForegroundColor Red
                    continue
                }
            }
        }
    }

    # Get all clusters from all connected vCenter servers
    $clusters = Get-Cluster | Where-Object { $_.HAEnabled -eq $true }
    
    # Initialize results collection for email
    $allResults = @()
    
    Write-Host "`nAnalyzing cluster capacity across all vCenter servers (N-2 model)..." -ForegroundColor Yellow
    
    foreach ($cluster in $clusters) {
        # Get the vCenter server this cluster belongs to
        $vCenterName = [string]($cluster.Uid.Split('@')[1].Split(':')[0])
        
        Write-Host "Processing vCenter: $vCenterName, Cluster: $($cluster.Name)" -ForegroundColor Cyan
        
        # Get all connected hosts in cluster
        $hosts = $cluster | Get-VMHost | Where-Object { $_.ConnectionState -eq "Connected" -and $_.PowerState -eq "PoweredOn" }
        $totalHosts = [int]$hosts.Count
        
        if ($totalHosts -lt 3) {
            Write-Host "  Insufficient hosts for N-2 analysis (need at least 3)" -ForegroundColor Yellow
            continue
        }
        
        # Calculate total cluster resources - convert to proper numeric types
        $totalCpuMhz = [double](($hosts | Measure-Object -Property CpuTotalMhz -Sum).Sum)
        $totalMemoryMB = [double](($hosts | Measure-Object -Property MemoryTotalMB -Sum).Sum)
        $totalCpuCores = [int](($hosts | Measure-Object -Property NumCpu -Sum).Sum)
        
        # Calculate N-2 usable capacity (remove any 2 hosts)
        # Use average host capacity for N-2 calculation
        $avgCpuMhzPerHost = [double]($totalCpuMhz / $totalHosts)
        $avgMemoryMBPerHost = [double]($totalMemoryMB / $totalHosts)
        $avgCpuCoresPerHost = [double]($totalCpuCores / $totalHosts)
        
        $n2CpuMhz = [double]($totalCpuMhz - (2 * $avgCpuMhzPerHost))
        $n2MemoryMB = [double]($totalMemoryMB - (2 * $avgMemoryMBPerHost))
        $n2CpuCores = [int]($totalCpuCores - (2 * $avgCpuCoresPerHost))
        
        # Calculate N-2 usable CPU cores with overcommit
        $n2UsableCpuCores = [double]($n2CpuCores * $CpuOvercommitRatio)
        
        # Get vSAN datastore info if available
        $vSanDatastore = $cluster | Get-Datastore | Where-Object { $_.Type -eq "vsan" } | Select-Object -First 1
        $totalvSanTB = 0
        $n2vSanUsableTB = 0
        $vSanUsedTB = 0
        
        if ($vSanDatastore) {
            $totalvSanTB = [math]::Round($vSanDatastore.CapacityGB / 1024, 2)  # Convert to TB
            $vSanUsedTB = [math]::Round(($vSanDatastore.CapacityGB - $vSanDatastore.FreeSpaceGB) / 1024, 2)  # Used space in TB
            # For vSAN N-2, lose ~2 hosts worth of capacity
            $avgStoragePerHostTB = $totalvSanTB / $totalHosts
            $n2vSanUsableTB = [math]::Round($totalvSanTB - (2 * $avgStoragePerHostTB), 2)
        }
        
        # Get ALL VMs in the cluster (regardless of power state)
        $allVMs = $cluster | Get-VM
        $totalVMs = [int]$allVMs.Count
        $poweredOnVMs = $allVMs | Where-Object { $_.PowerState -eq "PoweredOn" }
        $poweredOnCount = [int]$poweredOnVMs.Count
        $poweredOffCount = $totalVMs - $poweredOnCount
        
        # Calculate VM resource demands using ONLY powered-on VMs (allocated resources)
        $allocatedCpuCores = [int](($poweredOnVMs | Measure-Object -Property NumCpu -Sum).Sum)
        $allocatedMemoryMB = [double](($poweredOnVMs | Measure-Object -Property MemoryMB -Sum).Sum)
        
        # Calculate vCPU to pCPU ratio
        $vCpuToPcpuRatio = [math]::Round([double]$allocatedCpuCores / [double]$totalCpuCores, 2)
        
        # Calculate total usable CPU cores with 3:1 overcommit
        $totalUsableCpuCores = [double]($totalCpuCores * $CpuOvercommitRatio)
        
        # Calculate utilisation percentages against N-2 usable capacity
        $n2CpuUtilPct = if ($n2UsableCpuCores -gt 0) { [math]::Round(([double]$allocatedCpuCores / [double]$n2UsableCpuCores) * 100, 2) } else { 0 }
        $n2MemUtilPct = if ($n2MemoryMB -gt 0) { [math]::Round(($allocatedMemoryMB / $n2MemoryMB) * 100, 2) } else { 0 }
        $n2vSanUtilPct = if ($n2vSanUsableTB -gt 0) { [math]::Round(($vSanUsedTB / $n2vSanUsableTB) * 100, 2) } else { 0 }
        
        # Create the cluster result object
        $clusterResult = @{
            Cluster = [string]$cluster.Name
            TotalHosts = $totalHosts
            TotalVMs = $totalVMs
            PoweredOnVMs = $poweredOnCount
            PoweredOffVMs = $poweredOffCount
            vCpuToPcpuRatio = "$($vCpuToPcpuRatio):1"
            
            # Currently assigned/used resources (from powered-on VMs only)
            vCPU_Assigned = $allocatedCpuCores
            Memory_Assigned_GB = [math]::Round($allocatedMemoryMB / 1024, 2)      # Convert to GB
            vSAN_Used_TB = if ($vSanUsedTB -gt 0) { $vSanUsedTB } else { 0 }
            
            # Total capacity (without N-2)
            Total_CPU_Cores = $totalCpuCores
            Total_CPU_Usable = $totalUsableCpuCores
            Total_Memory_GB = [math]::Round($totalMemoryMB / 1024, 2)    # Convert to GB
            Total_vSAN_TB = if ($totalvSanTB -gt 0) { $totalvSanTB } else { 0 }
            
            # N-2 capacity
            N2_CPU_Cores = $n2CpuCores
            N2_CPU_Usable = $n2UsableCpuCores
            N2_Memory_GB = [math]::Round($n2MemoryMB / 1024, 2)         # Convert to GB
            N2_vSAN_Usable_TB = if ($n2vSanUsableTB -gt 0) { $n2vSanUsableTB } else { 0 }
            
            # Utilisation against N-2 usable capacity
            N2_CPU_Util = "$($n2CpuUtilPct)%"
            N2_Memory_Util = "$($n2MemUtilPct)%"
            N2_vSAN_Util = if ($n2vSanUsableTB -gt 0) { "$($n2vSanUtilPct)%" } else { "N/A" }
        }
        
        $allResults += $clusterResult
    }
    
    # Sort results by Cluster name
    $sortedResults = $allResults | Sort-Object { $_.Cluster }
    
    # Send email report if configured
    if ($SendEmail -and $sortedResults.Count -gt 0) {
        Write-Host "`nGenerating email report..." -ForegroundColor Green
        
        # Create HTML email content
        $htmlBody = @"
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #2E8B57; }
        h2 { color: #4682B4; margin-top: 30px; }
        h3 { color: #333; margin-top: 20px; }
        table { border-collapse: collapse; width: 100%; margin: 15px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; font-weight: bold; }
        .summary { background-color: #f5f5f5; padding: 10px; margin: 20px 0; }
        .small-text { font-size: 0.9em; }
        .center-text { text-align: center; }
    </style>
</head>
<body>
    <h1>VMware Cluster Capacity Analysis Report (N-2 Model)</h1>
    <p><strong>Generated:</strong> $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
    
    <div class="summary">
        <h3>Analysis Parameters</h3>
        <ul>
            <li>CPU Overcommit Ratio: $($CpuOvercommitRatio):1</li>
            <li>VM counts include all VMs (powered-on and powered-off)</li>
            <li>Resource utilization based on powered-on VMs only</li>
        </ul>
    </div>

    <h2>Cluster Capacity Analysis - N-2 Model</h2>
    <table>
        <tr>
            <th rowspan="2">Cluster</th>
            <th rowspan="2">Total<br>Hosts</th>
            <th colspan="3" style="background-color: #e8f4f8; text-align: center;">VM Counts</th>
            <th rowspan="2">vCPU:pCPU<br>Ratio</th>
            <th colspan="3" style="background-color: #fff3cd; text-align: center;">Currently Assigned/Used</th>
            <th colspan="3" style="background-color: #e6f3ff; text-align: center;">Total Cluster Capacity</th>
            <th colspan="3" style="background-color: #ffe6e6; text-align: center;">Total Usable Capacity N-2</th>
            <th colspan="3" style="background-color: #f0f8e6; text-align: center;">Utilisation % N-2</th>
        </tr>
        <tr>
            <th class="small-text" style="background-color: #e8f4f8;">Total<br>VMs</th>
            <th class="small-text" style="background-color: #e8f4f8;">Powered<br>On</th>
            <th class="small-text" style="background-color: #e8f4f8;">Powered<br>Off</th>
            <th class="small-text" style="background-color: #fff3cd;">vCPU<br>Assigned</th>
            <th class="small-text" style="background-color: #fff3cd;">Memory<br>Assigned (GB)</th>
            <th class="small-text" style="background-color: #fff3cd;">vSAN<br>Used (TB)</th>
            <th class="small-text" style="background-color: #e6f3ff;">CPU Cores<br>(w/ 3:1)</th>
            <th class="small-text" style="background-color: #e6f3ff;">Memory<br>(GB)</th>
            <th class="small-text" style="background-color: #e6f3ff;">vSAN<br>(TB)</th>
            <th class="small-text" style="background-color: #ffe6e6;">CPU Cores<br>(w/ 3:1)</th>
            <th class="small-text" style="background-color: #ffe6e6;">Memory<br>(GB)</th>
            <th class="small-text" style="background-color: #ffe6e6;">vSAN<br>(TB)</th>
            <th class="small-text" style="background-color: #f0f8e6;">CPU</th>
            <th class="small-text" style="background-color: #f0f8e6;">Memory</th>
            <th class="small-text" style="background-color: #f0f8e6;">vSAN</th>
        </tr>
"@
        
        foreach ($result in $sortedResults) {
            $totalvSanDisplay = if ($result.Total_vSAN_TB -gt 0) { $result.Total_vSAN_TB } else { "N/A" }
            $n2vSanDisplay = if ($result.N2_vSAN_Usable_TB -gt 0) { $result.N2_vSAN_Usable_TB } else { "N/A" }
            $vSanUsedDisplay = if ($result.vSAN_Used_TB -gt 0) { $result.vSAN_Used_TB } else { "N/A" }
            
            $htmlBody += "<tr>"
            $htmlBody += "<td>$($result.Cluster)</td>"
            $htmlBody += "<td class='center-text'>$($result.TotalHosts)</td>"
            # VM counts
            $htmlBody += "<td style='background-color: #f0f8fc; text-align: center;'>$($result.TotalVMs)</td>"
            $htmlBody += "<td style='background-color: #f0f8fc; text-align: center;'>$($result.PoweredOnVMs)</td>"
            $htmlBody += "<td style='background-color: #f0f8fc; text-align: center;'>$($result.PoweredOffVMs)</td>"
            $htmlBody += "<td class='center-text'>$($result.vCpuToPcpuRatio)</td>"
            # Currently assigned/used resources
            $htmlBody += "<td style='background-color: #fffbf0; text-align: center;'>$($result.vCPU_Assigned)</td>"
            $htmlBody += "<td style='background-color: #fffbf0; text-align: center;'>$($result.Memory_Assigned_GB)</td>"
            $htmlBody += "<td style='background-color: #fffbf0; text-align: center;'>$vSanUsedDisplay</td>"
            # Total capacity (with overcommit - should be higher than N-2)
            $htmlBody += "<td style='background-color: #f9fdff; text-align: center;'>$($result.Total_CPU_Usable)</td>"
            $htmlBody += "<td style='background-color: #f9fdff; text-align: center;'>$($result.Total_Memory_GB)</td>"
            $htmlBody += "<td style='background-color: #f9fdff; text-align: center;'>$totalvSanDisplay</td>"
            # N-2 capacity
            $htmlBody += "<td style='background-color: #fff9f9; text-align: center;'>$($result.N2_CPU_Usable)</td>"
            $htmlBody += "<td style='background-color: #fff9f9; text-align: center;'>$($result.N2_Memory_GB)</td>"
            $htmlBody += "<td style='background-color: #fff9f9; text-align: center;'>$n2vSanDisplay</td>"
            # Utilisation against N-2 usable capacity
            $htmlBody += "<td style='background-color: #f8fdf8; text-align: center;'>$($result.N2_CPU_Util)</td>"
            $htmlBody += "<td style='background-color: #f8fdf8; text-align: center;'>$($result.N2_Memory_Util)</td>"
            $htmlBody += "<td style='background-color: #f8fdf8; text-align: center;'>$($result.N2_vSAN_Util)</td>"
            $htmlBody += "</tr>"
        }
        
        $htmlBody += @"
    </table>

    <div class="summary">
        <h3>Notes</h3>
        <ul>
            <li><strong>VM Counts:</strong> Total VMs includes all VMs (powered-on and powered-off) in each cluster</li>
            <li><strong>Currently Assigned/Used:</strong> Resource usage from powered-on VMs only</li>
            <li><strong>Total Cluster Capacity:</strong> The total/maximum amount of resources within a cluster (all hosts)</li>
            <li><strong>Usable Capacity:</strong> The amount of usable compute storage with 2 hosts down</li>
            <li><strong>Utilisation % (N-2):</strong> Currently assigned resources / Total usable capacity (N-2)</li>
            <li>CPU capacity includes $($CpuOvercommitRatio):1 overcommit ratio for both total and N-2 calculations</li>
            <li>vSAN N-2 capacity is calculated based on average storage per host</li>
            <li>Utilisation percentages indicate capacity stress in a 2-host failure scenario</li>
        </ul>
    </div>

    <p><em>VMware Capacity Analysis Script (N-2 Model)</em></p>
</body>
</html>
"@
        
        try {
            $emailParams = @{
                To = $EmailTo
                From = $EmailFrom
                Subject = $EmailSubject
                Body = $htmlBody
                BodyAsHtml = $true
                SmtpServer = $SMTPServer
                Port = $SMTPPort
                UseSsl = $UseSSL
            }
            
            Send-MailMessage @emailParams
            Write-Host "✓ Email report sent successfully to $EmailTo" -ForegroundColor Green
            
        } catch {
            Write-Host "✗ Failed to send email: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
} catch {
    Write-Error "Error: $($_.Exception.Message)"
} finally {
    # Disconnect from vCenter
    if ($global:DefaultVIServers) {
        Write-Host "`nDisconnecting from vCenter..." -ForegroundColor Green
        Disconnect-VIServer -Server * -Confirm:$false
    }
}

Write-Host "`nN-2 capacity analysis complete!" -ForegroundColor Green
