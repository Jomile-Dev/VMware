# VCF Diagnostic Stats Collection Script
# Set your output directory here
$OutputDir = "D:\VMware_Stats"

# Define your vCenter servers
$vCenterServers = @("test.test.test",
                    "test.test.test",
                    "test.test.test",
                    "test.test.test",
                    "test.test.test")

Write-Host "vCenter servers to process: $($vCenterServers.Count)" -ForegroundColor White
$vCenterServers | ForEach-Object { Write-Host "  - $_" -ForegroundColor Gray }

# Get vCenter credentials interactively
Write-Host "`nPlease provide vCenter administrator credentials:" -ForegroundColor Yellow
$VCenterCredentials = Get-Credential -Message "Enter vCenter SDDC Administrator credentials (user@domain or domain\user)"

if (-not $VCenterCredentials) {
    Write-Error "Credentials are required to proceed. Exiting script."
    exit 1
}

# Verify credentials were provided
Write-Host "Credentials provided for user: $($VCenterCredentials.UserName)" -ForegroundColor Green

$allResults = @()
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"

foreach ($vc in $vCenterServers) {
    try {
        # Connect to individual vCenter
        Write-Host "`nConnecting to $vc..." -ForegroundColor Cyan
        Connect-VIServer -Server $vc -Credential $VCenterCredentials -ErrorAction Stop
        Write-Host "Connected to $vc" -ForegroundColor Green
        
        # Test connection
        Write-Host "Testing connection..." -ForegroundColor Gray
        $connectionTest = Get-View ServiceInstance
        Write-Host "Connection test passed" -ForegroundColor Green
        
        # Get VMs and their hosts
        Write-Host "Getting VMs and hosts..." -ForegroundColor Cyan
        $vms = Get-VM
        $vmHosts = Get-VMHost
        Write-Host "Found VMs: $($vms.Count) | Hosts: $($vmHosts.Count)" -ForegroundColor White
        
        if ($vms.Count -eq 0) {
            Write-Warning "No VMs found! Check permissions."
            continue
        }
        
        if ($vmHosts.Count -eq 0) {
            Write-Warning "No hosts found! Check permissions."
            continue
        }
        
        # Check available metrics
        Write-Host "Checking available metrics..." -ForegroundColor Cyan
        $testVM = $vms[0]
        $testHost = $vmHosts[0]
        
        Write-Host "Testing metric discovery on VM: $($testVM.Name)" -ForegroundColor Gray
        try {
            $vmMetrics = Get-StatType -Entity $testVM
            Write-Host "VM metrics available: $($vmMetrics.Count)" -ForegroundColor White
        } catch {
            Write-Warning "Failed to get VM metrics: $_"
            continue
        }
        
        Write-Host "Testing metric discovery on Host: $($testHost.Name)" -ForegroundColor Gray  
        try {
            $hostMetrics = Get-StatType -Entity $testHost
            Write-Host "Host metrics available: $($hostMetrics.Count)" -ForegroundColor White
        } catch {
            Write-Warning "Failed to get host metrics: $_"
            continue
        }
        
        # NUMA metrics are on hosts
        $numaMetrics = $hostMetrics | Where-Object {$_.Name -like "*numa*"}
        
        # VM contention metrics
        $vmContentionMetrics = $vmMetrics | Where-Object {$_.Name -like "*cpu.ready*" -or $_.Name -like "*cpu.wait*" -or $_.Name -like "*cpu.costop*"}
        
        Write-Host "Host NUMA: $($numaMetrics.Count) | VM Contention: $($vmContentionMetrics.Count)" -ForegroundColor White
        
        # Show some actual metric names for debugging
        if ($vmMetrics.Count -gt 0) {
            Write-Host "Sample VM metrics:" -ForegroundColor Gray
            $vmMetrics | Where-Object {$_.Name -like "*cpu*"} | Select-Object -First 5 | ForEach-Object { Write-Host "  $($_.Name)" -ForegroundColor DarkGray }
        }
        
        if ($numaMetrics.Count -gt 0) {
            Write-Host "Available NUMA metrics:" -ForegroundColor Gray
            $numaMetrics | Select-Object -First 3 | ForEach-Object { Write-Host "  $($_.Name)" -ForegroundColor DarkGray }
        }
        
        # Collect NUMA and contention data for VMs only
        $metricsToCollect = @()
        
        # Add NUMA metrics if available
        if ($numaMetrics.Count -gt 0) {
            $metricsToCollect += $numaMetrics.Name
        }
        
        # Add contention metrics if available
        if ($vmContentionMetrics.Count -gt 0) {
            $metricsToCollect += $vmContentionMetrics.Name
        }
        
        # Add essential VM metrics
        $metricsToCollect += @("cpu.ready.summation", "cpu.wait.summation", "cpu.costop.summation")
        
        # Remove duplicates
        $metricsToCollect = $metricsToCollect | Sort-Object -Unique
        
        Write-Host "Collecting metrics for $($metricsToCollect.Count) metric types..." -ForegroundColor Cyan
        
        foreach ($metric in $metricsToCollect) {
            try {
                $vmStats = Get-Stat -Entity $vms -Stat $metric -Start (Get-Date).AddHours(-24) -MaxSamples 10 -ErrorAction SilentlyContinue
                
                foreach ($stat in $vmStats) {
                    # Check for duplicate before adding
                    $duplicate = $allResults | Where-Object {
                        $_.vCenter -eq $vc -and 
                        $_.VM -eq $stat.Entity.Name -and 
                        $_.MetricId -eq $stat.MetricId -and 
                        $_.Timestamp -eq $stat.Timestamp
                    }
                    
                    if (-not $duplicate) {
                        $allResults += [PSCustomObject]@{
                            vCenter = $vc
                            VM = $stat.Entity.Name
                            MetricId = $stat.MetricId
                            Value = $stat.Value
                            Unit = $stat.Unit
                            Timestamp = $stat.Timestamp
                        }
                    }
                }
            } catch {
                Write-Warning "Failed to collect metric '$metric': $_"
            }
        }
        
        Write-Host "Collected $($allResults.Count) data points from $vc" -ForegroundColor Green
        
    } catch {
        Write-Warning "Failed to connect to $vc : $_"
    } finally {
        if ($global:DefaultVIServers | Where-Object {$_.Name -eq $vc}) {
            Write-Host "Disconnecting from $vc..." -ForegroundColor Gray
            Disconnect-VIServer -Server $vc -Confirm:$false -Force -ErrorAction SilentlyContinue
        }
    }
}

# Clear credentials from memory for security
$VCenterCredentials = $null

# Export results and analysis
if (-not (Test-Path -Path $OutputDir)) {
    New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
    Write-Host "Created output directory: $OutputDir" -ForegroundColor Green
}

$exportPath = Join-Path $OutputDir "VCF_VM_Analysis_$timestamp.csv"
Write-Host "`nTotal data points collected: $($allResults.Count)" -ForegroundColor White

if ($allResults.Count -gt 0) {
    $allResults | Export-Csv -Path $exportPath -NoTypeInformation
    Write-Host "Data exported to: $exportPath" -ForegroundColor Green
    
    # VM contention analysis
    Write-Host "`n=== VM CONTENTION DATA ===" -ForegroundColor Yellow
    
    $vmContentionData = $allResults | Where-Object {$_.MetricId -eq "cpu.ready.summation"}
    
    if ($vmContentionData.Count -gt 0) {
        # Calculate metrics per VM
        $vmAnalysis = $vmContentionData | Group-Object VM | ForEach-Object {
            $avgReady = ($_.Group | Measure-Object -Property Value -Average).Average
            $maxReady = ($_.Group | Measure-Object -Property Value -Maximum).Maximum
            $vCenter = ($_.Group | Select-Object -First 1).vCenter
            
            [PSCustomObject]@{
                VM = $_.Name
                vCenter = $vCenter
                AvgCpuReadyMs = [Math]::Round($avgReady, 2)
                MaxCpuReadyMs = [Math]::Round($maxReady, 2)
            }
        } | Sort-Object AvgCpuReadyMs -Descending
        
        $vmAnalysis | Format-Table -AutoSize
        
        # Export VM analysis
        $vmAnalysisPath = Join-Path $OutputDir "VM_Contention_Analysis_$timestamp.csv"
        $vmAnalysis | Export-Csv -Path $vmAnalysisPath -NoTypeInformation
        Write-Host "VM analysis exported to: $vmAnalysisPath" -ForegroundColor Green
        
        # Highlight high contention VMs
        $highContentionVMs = $vmAnalysis | Where-Object {$_.AvgCpuReadyMs -gt 5000}
        if ($highContentionVMs.Count -gt 0) {
            Write-Host "`nHigh CPU contention VMs (>5000ms avg ready time):" -ForegroundColor Red
            $highContentionVMs | Format-Table -AutoSize
        }
        
    } else {
        Write-Host "No CPU ready time data collected." -ForegroundColor Yellow
    }
    
    # NUMA analysis
    Write-Host "`n=== NUMA DATA ===" -ForegroundColor Yellow
    
    $numaData = $allResults | Where-Object {$_.MetricId -like "*numa*"}
    
    if ($numaData.Count -gt 0) {
        # Group NUMA data by vCenter and metric
        $numaAnalysis = $numaData | Group-Object vCenter, MetricId | ForEach-Object {
            $parts = $_.Name -split ", "
            $vCenter = $parts[0]
            $metricId = $parts[1]
            
            $avgValue = ($_.Group | Measure-Object -Property Value -Average).Average
            $maxValue = ($_.Group | Measure-Object -Property Value -Maximum).Maximum
            
            [PSCustomObject]@{
                vCenter = $vCenter
                MetricId = $metricId
                AvgValue = [Math]::Round($avgValue, 2)
                MaxValue = [Math]::Round($maxValue, 2)
                Unit = ($_.Group | Select-Object -First 1).Unit
                SampleCount = $_.Group.Count
            }
        } | Sort-Object vCenter, MetricId
        
        $numaAnalysis | Format-Table -AutoSize
        
        # Export NUMA analysis
        $numaAnalysisPath = Join-Path $OutputDir "NUMA_Analysis_$timestamp.csv"
        $numaAnalysis | Export-Csv -Path $numaAnalysisPath -NoTypeInformation
        Write-Host "NUMA analysis exported to: $numaAnalysisPath" -ForegroundColor Green
        
    } else {
        Write-Host "No NUMA data collected." -ForegroundColor Yellow
    }
    
    # Summary counts
    Write-Host "`n=== SUMMARY ===" -ForegroundColor Magenta
    Write-Host "Total VMs analyzed: $(($allResults | Group-Object VM).Count)" -ForegroundColor White
    Write-Host "Total vCenters processed: $(($allResults | Group-Object vCenter).Count)" -ForegroundColor White
    Write-Host "Total data points collected: $($allResults.Count)" -ForegroundColor White
    Write-Host "Output directory: $OutputDir" -ForegroundColor White
    
} else {
    Write-Warning "No data collected! Please check:"
    Write-Host "  - Network connectivity to vCenter servers" -ForegroundColor Gray
    Write-Host "  - Credential permissions (requires read access to VMs and hosts)" -ForegroundColor Gray
    Write-Host "  - vCenter server addresses are correct" -ForegroundColor Gray
}

Write-Host "`nScript completed." -ForegroundColor Green
