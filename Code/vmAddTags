# Requires: VMware.PowerCLI

# 1. Prompt once for credentials
$cred = Get-Credential -Message "Enter vCenter credentials"

# 2. List all vCenters you want to connect to
$vcenters = @(
    "vcsa1.example.local",
    "vcsa2.example.local",
    "vcsa3.example.local"
    # Add ALL your vCenter FQDNs or IPs here
)

# 3. Connect to each vCenter and store connections
$connectedServers = @()
Write-Host "=== Connecting to vCenters ===" -ForegroundColor Cyan
foreach ($vc in $vcenters) {
    Write-Host "Connecting to $vc..." -ForegroundColor Yellow
    try {
        $connection = Connect-VIServer -Server $vc -Credential $cred -WarningAction SilentlyContinue -ErrorAction Stop
        $connectedServers += $connection
        Write-Host "‚úÖ Connected to $vc" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Failed to connect to $vc : $($_.Exception.Message)" -ForegroundColor Red
    }
}

if ($connectedServers.Count -eq 0) {
    Write-Error "No vCenter connections established! Exiting..."
    exit
}

Write-Host "`n‚úÖ Connected to $($connectedServers.Count) vCenter(s)" -ForegroundColor Green

# 4. Set category name - Common choices: "Backup", "Veeam", "Application", "VEEAM"
$categoryName = "VEEAM"

# 5. Import CSV
$csvPath = ".\vm_tags.csv"
if (-not (Test-Path $csvPath)) {
    Write-Error "CSV file not found: $csvPath"
    Disconnect-VIServer -Server * -Confirm:$false
    exit
}
$vmList = Import-Csv -Path $csvPath
Write-Host "`nüìã Loaded $($vmList.Count) entries from CSV`n" -ForegroundColor Cyan

# 6. Process each vCenter individually
foreach ($vcServer in $connectedServers) {
    Write-Host "`n========================================" -ForegroundColor Cyan
    Write-Host "Processing vCenter: $($vcServer.Name)" -ForegroundColor Cyan
    Write-Host "========================================" -ForegroundColor Cyan
    
    # Ensure category exists on THIS vCenter
    $category = Get-TagCategory -Name $categoryName -Server $vcServer -ErrorAction SilentlyContinue
    if (-not $category) {
        Write-Host "Creating category '$categoryName' on $($vcServer.Name)..." -ForegroundColor Yellow
        try {
            $category = New-TagCategory -Name $categoryName -Cardinality Multiple -EntityType VirtualMachine -Description "Veeam backup tags" -Server $vcServer -ErrorAction Stop
            Write-Host "‚úÖ Category created" -ForegroundColor Green
        }
        catch {
            Write-Error "Failed to create category on $($vcServer.Name): $($_.Exception.Message)"
            continue
        }
    }
    else {
        Write-Host "‚úÖ Category '$categoryName' exists on $($vcServer.Name)" -ForegroundColor Green
    }
    
    # Process each VM from CSV
    foreach ($row in $vmList) {
        $vmName = $row.VMName.Trim()
        $tagList = $row.Tags -split "," | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }

        Write-Host "`n--- Processing VM: $vmName ---" -ForegroundColor White
        
        # Search for VM on THIS vCenter only
        $vm = Get-VM -Name $vmName -Server $vcServer -ErrorAction SilentlyContinue
        
        if (-not $vm) {
            Write-Host "‚ö†Ô∏è  VM '$vmName' not found on $($vcServer.Name) - Skipping" -ForegroundColor Gray
            continue
        }
        
        Write-Host "‚úÖ Found VM: $vmName (PowerState: $($vm.PowerState), Host: $($vm.VMHost.Name))" -ForegroundColor Green

        # Process each tag for this VM
        foreach ($tagName in $tagList) {
            if (-not $tagName) { continue }

            # Get or create tag on THIS vCenter
            $tag = Get-Tag -Name $tagName -Category $categoryName -Server $vcServer -ErrorAction SilentlyContinue
            if (-not $tag) {
                Write-Host "   üÜï Creating tag '$tagName' in category '$categoryName' on $($vcServer.Name)..." -ForegroundColor Yellow
                try {
                    $tag = New-Tag -Name $tagName -Category $categoryName -Server $vcServer -ErrorAction Stop
                    Write-Host "   ‚úÖ Tag '$tagName' created" -ForegroundColor Green
                }
                catch {
                    Write-Error "   Failed to create tag '$tagName' on $($vcServer.Name): $($_.Exception.Message)"
                    continue
                }
            }
            else {
                Write-Host "   ‚úÖ Tag '$tagName' exists" -ForegroundColor Green
            }

            # Check if tag is already assigned
            $existingAssignment = Get-TagAssignment -Entity $vm -Tag $tag -Server $vcServer -ErrorAction SilentlyContinue
            if ($existingAssignment) {
                Write-Host "   ‚ÑπÔ∏è  Tag '$tagName' already assigned to '$vmName'" -ForegroundColor Gray
                continue
            }

            # Assign tag on THIS vCenter
            Write-Host "   üè∑Ô∏è  Assigning '$tagName' to '$vmName' on $($vcServer.Name)..." -ForegroundColor Yellow
            try {
                $assignment = New-TagAssignment -Entity $vm -Tag $tag -Server $vcServer -ErrorAction Stop
                Write-Host "   ‚úÖ Successfully assigned '$tagName' to '$vmName'" -ForegroundColor Green
            }
            catch {
                Write-Error "   Failed to assign tag '$tagName' to '$vmName' on $($vcServer.Name): $($_.Exception.Message)"
            }
        }
    }
}

# 7. Verification across all vCenters
Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "=== Verification ===" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan

foreach ($vcServer in $connectedServers) {
    Write-Host "`nvCenter: $($vcServer.Name)" -ForegroundColor Yellow
    foreach ($row in $vmList) {
        $vmName = $row.VMName.Trim()
        $vm = Get-VM -Name $vmName -Server $vcServer -ErrorAction SilentlyContinue
        if ($vm) {
            $assignedTags = Get-TagAssignment -Entity $vm -Server $vcServer | 
                           Where-Object { $_.Tag.Category.Name -eq $categoryName } |
                           Select-Object -ExpandProperty Tag | 
                           Select-Object -ExpandProperty Name
            if ($assignedTags) {
                Write-Host "  ‚úÖ $vmName : $($assignedTags -join ', ')" -ForegroundColor Green
            } else {
                Write-Host "  ‚ö†Ô∏è  $vmName : No $categoryName tags assigned" -ForegroundColor Yellow
            }
        }
    }
}

# 8. Disconnect from all vCenters
Write-Host "`n=== Disconnecting from vCenters ===" -ForegroundColor Cyan
Disconnect-VIServer -Server * -Confirm:$false
Write-Host "‚úÖ All done!" -ForegroundColor Green
