# Requires: VMware.PowerCLI

# 1. Ask for credentials
$cred = Get-Credential -Message "Enter vCenter credentials"

# 2. Connect to multiple vCenters - UPDATE THIS LIST WITH YOUR ACTUAL VCENTERS!
$vcenters = @(
    "vcsa1.example.local",
    "vcsa2.example.local",
    "vcsa3.example.local"
    # Add ALL your vCenter FQDNs or IPs here
)
Write-Host "=== Connecting to vCenters ===" -ForegroundColor Cyan

foreach ($vc in $vcenters) {
    try {
        Write-Host "Connecting to $vc..." -ForegroundColor Yellow
        $connection = Connect-VIServer -Server $vc -Credential $cred -WarningAction SilentlyContinue -ErrorAction Stop
        Write-Host "✅ Successfully connected to $vc" -ForegroundColor Green
    }
    catch {
        Write-Error "❌ Failed to connect to $vc"
        Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "   Possible reasons: Wrong credentials, network issue, vCenter unreachable" -ForegroundColor Gray
    }
}

# Verify connections
Write-Host "`n=== Active Connections ===" -ForegroundColor Cyan
if ($global:DefaultVIServers.Count -eq 0) {
    Write-Error "No vCenter connections established! Exiting..."
    exit
}
$global:DefaultVIServers | ForEach-Object {
    Write-Host "✅ $($_.Name) - User: $($_.User) - Version: $($_.Version)" -ForegroundColor Green
}
Write-Host ""

# 3. Import CSV
$csvPath = ".\vm_tags.csv"
if (-not (Test-Path $csvPath)) {
    Write-Error "CSV file not found: $csvPath"
    exit
}
$vmList = Import-Csv -Path $csvPath
Write-Host "📋 Loaded $($vmList.Count) entries from CSV" -ForegroundColor Cyan

# 4. Process each vCenter individually
foreach ($vcServer in $global:DefaultVIServers) {
    Write-Host "`n╔═══════════════════════════════════════════════════════════╗" -ForegroundColor Magenta
    Write-Host "║  Processing vCenter: $($vcServer.Name.PadRight(35))║" -ForegroundColor Magenta
    Write-Host "╚═══════════════════════════════════════════════════════════╝" -ForegroundColor Magenta
    
    # Ensure category exists on THIS vCenter
    $categoryName = "Backup"  # Change this to your preferred category name
    $category = Get-TagCategory -Name $categoryName -Server $vcServer -ErrorAction SilentlyContinue
    if (-not $category) {
        Write-Host "Creating category '$categoryName' on $($vcServer.Name)..." -ForegroundColor Yellow
        $category = New-TagCategory -Name $categoryName -Cardinality Multiple -EntityType VirtualMachine -Description "Veeam backup tags" -Server $vcServer
        Write-Host "✅ Category created" -ForegroundColor Green
    }
    else {
        Write-Host "✅ Category '$categoryName' exists on $($vcServer.Name)" -ForegroundColor Green
    }
    
    # Get total VMs visible on this vCenter
    $totalVMs = (Get-VM -Server $vcServer -ErrorAction SilentlyContinue).Count
    Write-Host "Total VMs visible on $($vcServer.Name): $totalVMs" -ForegroundColor Yellow
    
    # Process each VM from CSV
    foreach ($row in $vmList) {
        $vmName = $row.VMName.Trim()
        $tagList = $row.Tags -split "," | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }

        Write-Host "`n--- Processing VM: $vmName ---" -ForegroundColor Cyan
        
        # Search for VM on THIS specific vCenter
        $vm = Get-VM -Name $vmName -Server $vcServer -ErrorAction SilentlyContinue
        
        # Try wildcard if exact match fails
        if (-not $vm) {
            Write-Host "⚠️  Exact match failed, trying wildcard search..." -ForegroundColor Yellow
            $vms = Get-VM -Name "*$vmName*" -Server $vcServer -ErrorAction SilentlyContinue
            if ($vms.Count -eq 1) {
                $vm = $vms
                Write-Host "✅ Found via wildcard: '$($vm.Name)'" -ForegroundColor Green
            }
            elseif ($vms.Count -gt 1) {
                Write-Warning "❌ Multiple VMs found matching '$vmName' on $($vcServer.Name):"
                $vms | ForEach-Object { Write-Host "   - $($_.Name)" -ForegroundColor Gray }
                continue
            }
        }
        
        if (-not $vm) {
            Write-Host "⚠️  VM '$vmName' not found on $($vcServer.Name). Skipping..." -ForegroundColor Yellow
            continue
        }
        
        Write-Host "✅ Found VM: $vmName (PowerState: $($vm.PowerState), Host: $($vm.VMHost.Name))" -ForegroundColor Green

        foreach ($tagName in $tagList) {
            if (-not $tagName) { continue }

            # Get or create tag on THIS vCenter
            $tag = Get-Tag -Name $tagName -Category $categoryName -Server $vcServer -ErrorAction SilentlyContinue
            if (-not $tag) {
                Write-Host "🆕 Creating tag '$tagName' in category '$categoryName' on $($vcServer.Name)..." -ForegroundColor Yellow
                try {
                    $tag = New-Tag -Name $tagName -Category $categoryName -Server $vcServer -ErrorAction Stop
                    Write-Host "✅ Tag '$tagName' created" -ForegroundColor Green
                }
                catch {
                    Write-Error "Failed to create tag '$tagName': $($_.Exception.Message)"
                    continue
                }
            }
            else {
                Write-Host "✅ Tag '$tagName' exists" -ForegroundColor Green
            }

            # Check if tag is already assigned
            $existingAssignment = Get-TagAssignment -Entity $vm -Tag $tag -Server $vcServer -ErrorAction SilentlyContinue
            if ($existingAssignment) {
                Write-Host "ℹ️  Tag '$tagName' already assigned to '$vmName'" -ForegroundColor Gray
                continue
            }

            # Assign tag
            Write-Host "🏷️  Assigning '$tagName' to '$vmName'..." -ForegroundColor Yellow
            try {
                $assignment = New-TagAssignment -Entity $vm -Tag $tag -Server $vcServer -ErrorAction Stop
                Write-Host "✅ Successfully assigned '$tagName' to '$vmName'" -ForegroundColor Green
            }
            catch {
                Write-Error "Failed to assign tag '$tagName' to '$vmName': $($_.Exception.Message)"
            }
        }
    }
    
    # Verification for this vCenter
    Write-Host "`n=== Verification for $($vcServer.Name) ===" -ForegroundColor Cyan
    foreach ($row in $vmList) {
        $vmName = $row.VMName.Trim()
        $vm = Get-VM -Name $vmName -Server $vcServer -ErrorAction SilentlyContinue
        if ($vm) {
            $assignedTags = Get-TagAssignment -Entity $vm -Server $vcServer | Select-Object -ExpandProperty Tag | Select-Object -ExpandProperty Name
            if ($assignedTags) {
                Write-Host "$vmName : $($assignedTags -join ', ')" -ForegroundColor Green
            }
        }
    }
}

Write-Host "`n✅ All done! Processed all vCenters." -ForegroundColor Green
