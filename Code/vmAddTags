# Requires: VMware.PowerCLI

# 1. Ask for credentials
$cred = Get-Credential -Message "Enter vCenter credentials"

# 2. Connect to multiple vCenters - UPDATE THIS LIST WITH YOUR ACTUAL VCENTERS!
$vcenters = @(
    "vcsa1.example.local",
    "vcsa2.example.local",
    "vcsa3.example.local"
    # Add ALL your vCenter FQDNs or IPs here
)
Write-Host "=== Connecting to vCenters ===" -ForegroundColor Cyan

foreach ($vc in $vcenters) {
    try {
        Write-Host "Connecting to $vc..." -ForegroundColor Yellow
        $connection = Connect-VIServer -Server $vc -Credential $cred -WarningAction SilentlyContinue -ErrorAction Stop
        Write-Host "‚úÖ Successfully connected to $vc" -ForegroundColor Green
    }
    catch {
        Write-Error "‚ùå Failed to connect to $vc"
        Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "   Possible reasons: Wrong credentials, network issue, vCenter unreachable" -ForegroundColor Gray
    }
}

# Verify connections
Write-Host "`n=== Active Connections ===" -ForegroundColor Cyan
if ($global:DefaultVIServers.Count -eq 0) {
    Write-Error "No vCenter connections established! Exiting..."
    exit
}
$global:DefaultVIServers | ForEach-Object {
    Write-Host "‚úÖ $($_.Name) - User: $($_.User) - Version: $($_.Version)" -ForegroundColor Green
}
Write-Host ""

# 3. Ensure category exists - Common choices: "Backup", "Veeam", "Application", "General"
$categoryName = "Backup"  # Change this to your preferred category name
$category = Get-TagCategory -Name $categoryName -ErrorAction SilentlyContinue
if (-not $category) {
    Write-Host "Creating category '$categoryName'..." -ForegroundColor Yellow
    $category = New-TagCategory -Name $categoryName -Cardinality Multiple -EntityType VirtualMachine -Description "Veeam backup tags"
    Write-Host "‚úÖ Category created" -ForegroundColor Green
}
else {
    Write-Host "‚úÖ Category '$categoryName' exists" -ForegroundColor Green
}

# 4. Import CSV
$csvPath = ".\vm_tags.csv"
if (-not (Test-Path $csvPath)) {
    Write-Error "CSV file not found: $csvPath"
    exit
}
$vmList = Import-Csv -Path $csvPath
Write-Host "üìã Loaded $($vmList.Count) entries from CSV" -ForegroundColor Cyan

# 4a. Diagnostic - Check what VMs are visible
Write-Host "`n=== Diagnostic Information ===" -ForegroundColor Cyan
Write-Host "Connected vCenters:" -ForegroundColor Yellow
$global:DefaultVIServers | ForEach-Object {
    Write-Host "  - $($_.Name) (User: $($_.User), Connected: $($_.IsConnected))" -ForegroundColor Gray
}
$totalVMs = (Get-VM -ErrorAction SilentlyContinue).Count
Write-Host "Total VMs visible: $totalVMs" -ForegroundColor Yellow
Write-Host "Searching for VMs in CSV..." -ForegroundColor Yellow
foreach ($row in $vmList) {
    $testVM = Get-VM -Name $row.VMName.Trim() -ErrorAction SilentlyContinue
    if ($testVM) {
        Write-Host "  ‚úÖ $($row.VMName) - Found" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå $($row.VMName) - NOT FOUND" -ForegroundColor Red
        # Try searching in all datacenters
        $found = $false
        Get-Datacenter | ForEach-Object {
            $dcVMs = Get-VM -Location $_ -Name "*$($row.VMName)*" -ErrorAction SilentlyContinue
            if ($dcVMs) {
                Write-Host "     Found similar: $($dcVMs.Name -join ', ') in datacenter $($_.Name)" -ForegroundColor Yellow
                $found = $true
            }
        }
        if (-not $found) {
            Write-Host "     Not found in any datacenter - check permissions or vCenter connection" -ForegroundColor Gray
        }
    }
}
Write-Host "=== End Diagnostics ===`n" -ForegroundColor Cyan

# 5. Process each VM
foreach ($row in $vmList) {
    $vmName = $row.VMName.Trim()
    $tagList = $row.Tags -split "," | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }

    Write-Host "`n--- Processing VM: $vmName ---" -ForegroundColor Cyan
    
    # Try multiple methods to find the VM
    $vm = $null
    
    # Method 1: Exact match
    $vm = Get-VM -Name $vmName -ErrorAction SilentlyContinue
    
    # Method 2: Wildcard search if exact match fails
    if (-not $vm) {
        Write-Host "‚ö†Ô∏è  Exact match failed, trying wildcard search..." -ForegroundColor Yellow
        $vms = Get-VM -Name "*$vmName*" -ErrorAction SilentlyContinue
        if ($vms.Count -eq 1) {
            $vm = $vms
            Write-Host "‚úÖ Found via wildcard: '$($vm.Name)'" -ForegroundColor Green
        }
        elseif ($vms.Count -gt 1) {
            Write-Warning "‚ùå Multiple VMs found matching '$vmName':"
            $vms | ForEach-Object { Write-Host "   - $($_.Name)" -ForegroundColor Gray }
            continue
        }
    }
    
    # Method 3: Search across each vCenter individually
    if (-not $vm) {
        Write-Host "‚ö†Ô∏è  Searching across all connected vCenters..." -ForegroundColor Yellow
        foreach ($vc in $global:DefaultVIServers) {
            $vm = Get-VM -Name $vmName -Server $vc -ErrorAction SilentlyContinue
            if ($vm) {
                Write-Host "‚úÖ Found in vCenter: $($vc.Name)" -ForegroundColor Green
                break
            }
        }
    }
    
    if (-not $vm) {
        Write-Warning "‚ùå VM '$vmName' not found in any connected vCenter. Skipping..."
        Write-Host "   Check: 1) VM name spelling, 2) Connected to correct vCenter, 3) VM exists and is visible" -ForegroundColor Gray
        continue
    }
    
    Write-Host "‚úÖ Found VM: $vmName (PowerState: $($vm.PowerState), Host: $($vm.VMHost.Name))" -ForegroundColor Green

    foreach ($tagName in $tagList) {
        if (-not $tagName) { continue }

        # Get or create tag
        $tag = Get-Tag -Name $tagName -Category $categoryName -ErrorAction SilentlyContinue
        if (-not $tag) {
            Write-Host "üÜï Creating tag '$tagName' in category '$categoryName'..." -ForegroundColor Yellow
            try {
                $tag = New-Tag -Name $tagName -Category $categoryName -ErrorAction Stop
                Write-Host "‚úÖ Tag '$tagName' created" -ForegroundColor Green
            }
            catch {
                Write-Error "Failed to create tag '$tagName': $($_.Exception.Message)"
                continue
            }
        }
        else {
            Write-Host "‚úÖ Tag '$tagName' exists" -ForegroundColor Green
        }

        # Check if tag is already assigned
        $existingAssignment = Get-TagAssignment -Entity $vm -Tag $tag -ErrorAction SilentlyContinue
        if ($existingAssignment) {
            Write-Host "‚ÑπÔ∏è  Tag '$tagName' already assigned to '$vmName'" -ForegroundColor Gray
            continue
        }

        # Assign tag
        Write-Host "üè∑Ô∏è  Assigning '$tagName' to '$vmName'..." -ForegroundColor Yellow
        try {
            $assignment = New-TagAssignment -Entity $vm -Tag $tag -ErrorAction Stop
            Write-Host "‚úÖ Successfully assigned '$tagName' to '$vmName'" -ForegroundColor Green
        }
        catch {
            Write-Error "Failed to assign tag '$tagName' to '$vmName': $($_.Exception.Message)"
        }
    }
}

# 6. Verify assignments
Write-Host "`n=== Verification ===" -ForegroundColor Cyan
foreach ($row in $vmList) {
    $vmName = $row.VMName.Trim()
    $vm = Get-VM -Name $vmName -ErrorAction SilentlyContinue
    if ($vm) {
        $assignedTags = Get-TagAssignment -Entity $vm | Select-Object -ExpandProperty Tag | Select-Object -ExpandProperty Name
        Write-Host "$vmName : $($assignedTags -join ', ')" -ForegroundColor Green
    }
}

Write-Host "`n‚úÖ All done!" -ForegroundColor Green
